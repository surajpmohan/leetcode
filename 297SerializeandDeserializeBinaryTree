/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<>();
        if (root != null)
            q.add(root);
        List<Integer> list = new ArrayList<>();
        while(q.size()>0) {
            TreeNode node = q.remove();
            if (node != null) {
                list.add(node.val);
                q.add(node.left);
                q.add(node.right);
            } else {
                list.add(null);
            } 
        }
        for (int i=list.size()-1; i>=0; i--) {
            if (list.get(i)!=null) {
                break;
            }
            list.remove(i);
        }
        //System.out.println(list.toString().replace(" ",""));
        return list.toString().replace(" ","");
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        data = data.replace("[","");
        data = data.replace("]","");
        String[] nodes = data.split(",");
        TreeNode[] n = new TreeNode[nodes.length];
        Queue<TreeNode> q = new LinkedList<>();
        for(int i=0; i<nodes.length; i++) {
            if("null".equals(nodes[i]) || nodes[i] == null || "".equals(nodes[i])) {
                n[i] = null;
            } else {
                n[i] = new TreeNode(Integer.parseInt(nodes[i]));
            }
        }
        if (nodes.length>0) {
            q.add(n[0]);
            int i = 0;
            while(q.size()>0) {
                TreeNode node = q.remove();
                if (node == null) {
                    continue;
                }
                if (i<n.length-1) {
                    node.left = n[i+1];
                    q.add(node.left);
                    i++;
                }
                if (i<n.length-1) {
                    node.right = n[i+1];
                    q.add(node.right);
                    i++;
                }
                //node.right = n[i+2]; 
            }
            //generateTree(n[0], q);
            return n[0];
        } else {
            return null;
        }
    }   
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
